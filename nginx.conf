upstream docker-keycloak { 
    server keycloak:80;
}
        
server {
        #server_name <<hostname>>;
    listen 443 ssl;
    ssl_certificate      /etc/letsencrypt/live/$host/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/$host/privkey.pem;

    # https://community.letsencrypt.org/t/howto-easy-cert-generation-and-renewal-with-nginx/3491
    #
    #############################################################################

    # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
    # We use ^~ here, so that we don't check other regexes (for speed-up). We actually MUST cancel
    # other regex checks, because in our other config files have regex rule that denies access to files with dotted names.
    location ^~ /.well-known/acme-challenge/ {

            # Set correct content type. According to this:
            # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
            # Current specification requires "text/plain" or no content header at all.
            # It seems that "text/plain" is a safe option.
            default_type "text/plain";

                # This directory must be the same as in /etc/letsencrypt/cli.ini
                # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
                # there to "webroot".
                # Do NOT use alias, use root! Target directory is located here:
                # /var/www/common/letsencrypt/.well-known/acme-challenge/
                root         /var/www/letsencrypt;
    }

    # Hide /acme-challenge subdirectory and return 404 on all requests.
    # It is somewhat more secure than letting Nginx return 403.
    # Ending slash is important!
    location = /.well-known/acme-challenge/ {
            return 404;
    }
    
    location / {
      proxy_pass          http://docker-keycloak;
      proxy_set_header    Host               $host;
      proxy_set_header    X-Real-IP          $remote_addr;
      proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Host   $host;
      proxy_set_header    X-Forwarded-Server $host;
      proxy_set_header    X-Forwarded-Port   $server_port;
      proxy_set_header    X-Forwarded-Proto  $scheme;
    }
}
